  restart: true
  runtimeExecutable: "nodemon
  console: "integratedTerminal

npm concurrently : allows to run backgend express server and frentend react devserver in same time in one single command 
npm install --save express-validator
npm i bcryptjs  for password encryption save plain text in database
npm i config : for global variable
npm i gravatar : if user signup  its shows user profile details automatically
npm i jsonwebtoken : jwt pass token validation
npm i request: Request to be simplest way possible to make http calls. It supports HTTPS 
npm i bodyParser : for read request body data 
instead of using bodyParser we use express.json()


client side 
npm install moment,
npm install react-moment

/401: not authorised



  node js Role:
  
  Run Server:
  Create Server and Listen to Incoming Requests
  node js take incoming request and routes them in our code

  Business Logic:
  Handle Request, Validation Input, Connect to Database

  REPL:
  Read: Read User Input
  Eval: Evaluate User Input
  Print: PrintOutput(Result)
  Loop: Wait for new Input

  WebWorks:

HTTP,HTTPS:
Hype Text Transfer Protocal
A Protocol for Transferring Data which is understood by Browser and Server 
HTTPS: 
Hype Text Transfer Protocal Secure
HTTP + Data Encryption (during Transmission)

Core Modules:
http, https, fs, path, os

http: Launch a server ,  to send request 
https: launch a SSL server

Node js LifeCycle: 

node appjs -> start script -> parse code, register,variabes,functions
->event loop ( keeps on running as long as there are event listeners registered)

::node js uses an EVENT DRIVEN approach for all kinds of stuff
  node js execute single threaded javascript
  

  Streams & Buffers:
  buffers is simply a construct which allow you to hold multiple chunks and work with them before they are released once you done

Single Thread, Event Loop and Blocking code:
node js uses only one single javascript thread and
Thread: is basically like a process in your operating system
Event loop: is automatically started by node js when your starts 
          its Handle Event Callbacks
          its handle all Callbacks and its has certain order
          1)Timer Phase:at beginning of each new iteration its check if there abny timer callback(setTimout,setInterval callbacks)
          2nd)Pending Callbacks:and then its check other callbacks like I/O eg:(write/read file callback)
          3)Poll phase: node js look for new IO events and execute it callback
              Retrieve new I/O events excutes their callbacks 
          4)check phase: execute setImadiate() callback
          5)close Callbacks: Executes all close event callbacks
worker Pool: worker pool is responsible for all heavy lifting (eg: large file transfer)
             have different threads and 
             we have work with file,worker pool takecare and workers done and trigger callback

             event loop get terminate after ref==0


EXPRESS JS:
Why Express js?
    writing all server side logic is pretty complex so express help to write easily 
    express is all abt middleware
    def: Express is nodejs framework - add bunch of utility functions and tools and clear set of rules on how app should be built(middleware)
    its highly extensible and other packages can be plugged into it (middleware)
middleware:
  its a fucntion handle request and should call next() to forward the request to next function in line or send a response
SendFile(): to send HTML Files
    you're not limited to serving dummy text as a response
    if request is directly made for a file (eg. .css file is requested)
    you can enable static serving for such files via express.static()


 AVAILABLE TEMPLATES
 EJS =>   <p><%= name %> </p>
 Pug(Jade)=> p #{name}
 Handlerbars => <p> {{name}} </p>

 
MVC:
what is MVC? 
  separation of concerns
Models: are objects 
      representing your data and contains data-related logic
      managing your data (eg.saving and fetching data)
Views:  
    what the users sees
    views responsible for rendering the right content in our html documents and sending back to users
Controller: is Connecting Models and Views
          should only make sure that the two can communicate (in both direction)




DataBase:

SQL vs NoSQL

Horizonal scaling
  add more serverss and merge Data into DataBase

Vertical scaling
Improver server capacity/ hardware

SQL:
data uses Schemas
Relation DataBase
Data is distributed across multiple tables
Horizontal scaling is difficult/impossible,vertical scaling is possible
Limitation for lots of thousand read & write quries per second
SQL uses scrit data schemas and relations
You can Connect your Node.js app via package like mysql2
Writing SQL queries is not direclyt related to Node.js and something you have to learn in addition to Node.js


NoSQL:
Schema-less 
Data is typically mearged/nested in a few collections
Both horizontal and vertical scaling is posible
great performance for mass read & write request


MongoDB: 
https://github.com/bradtraversy/devconnector_2.0
https://learncodeonline.in/mongodb/
https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/
mongodb+srv://krishna123:<password>@devmern-bfjzi.mongodb.net/test?retryWrites=true

MongoDB stores data in flexible, JSON-like documents
MongoDB is collection of documents
The document model maps to the object in your application code, making data easy to work with  

MongoDB is a distributed Database at its core, so high availability , horizontal scaling and geographic distribution are built in and easy to use
MongoDB store data => in one document
MongoDB is a tool that create a multiple multiple database
MongoDB-> database #1
          database #1
MongoDb  to build for large scale application,
         monga to be as built quickly clear the data store,interact with data

NO SCHEMA:
 
id:1, "name":"santhana", "course":"mongoDB"
id:123, "name":"krishna", "course":"mongoDB",
id:124534, "name":"santhana",  "age":20

when data receives Database its put data into seprate instance
Mocha: is used for testing purpose

MongoDB umbrella:
 Query API, Serverless function, DB Trigger, Real Time Sync.
 https://www.mongodb.com/cloud/stitch

 MongoDB :
 CRUD 
 Create,Read,Update,Delete/Remove Operation
Create: .post() => is to save
READ:  .get()  => is to find
UPDATE: .put()  => is to changr action
DELETE: .delete() = >is to delete
Three A of MongoDB
A: Application
A: Analytics 
A: Admin

 Four operation CRUD 
	Create:  
		insertOne(data,options)
		InsertMany(data,options)
	Read:
		find (filter,options)
		findOne(filter,options)
	Update:
		updateOne(filter,data,options)
updateMany(filter,data,options)
replaceOne(filter,data,options)
Delete:
	deleteOne(filter,options)
	deleteMany(filter,options)

update() => its update the given data for unique ID and all properties in give ID get deleted except updated properties
updateOne(filter,data,options) :  db.studentData.updateOne({email: "krishna123@gmail.com"}, {$set: {email:"sandy123@gmail.com"}})
db.studentData.update.find({courseCount: {$gt:1}})   ===> gt means greater than 1
Print entire database
 db.studentData.find().forEach((student)=>{printjson(student)})
db.studentData.find({},{email:1,_id:0,name:1})
db.studentData.find({name:”Mark”}).lastlogin
db.studentData.find({},{email:1,_id:0,name:1}).toArray()   ===> return array of object [{ } ]
db.studentData.find().pretty() : while run this it show “it” to show all value
this method does not show all the value, it doesn’t contain all value,  it just contains the information about that all the value, 
What cursor is when try to dumb alll value from database, the actuall infomation doesn’t come directly until you say show ,the information comes only in meta file is called cursor, that meta file is cursor now 
When you call find() method its shows only cursor object ( (i.e)meta file



 "C:\Program Files\MongoDB\Server\4.0\bin\mongo.exe"

 show dbs   => to show db in our system
 use students => use is to switch db into students
db.studentData.insertOne()
db.studentData.find().pretty();
 Note: in MongoDB you directly don't store json we need to save in BSON 
 MongoDB convert JSON date into BSON Data

 structure:  
 DataBase: databaseName
 collection : user order  are to collections
 documents: {name,age }   {..}

 Nested/Embedded documents and reference are two type of document 


Relation Database:
	RD is a way in which you’re one document is interact with another document



Graph QL:
  graphQL that makes it easy to query fields and send data between the server and client
two main in graphQL: queries and mutations queries